
/**

Given a non-empty array of digits representing a non-negative integer, increment one to the integer.

The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.

You may assume the integer does not contain any leading zero, except the number 0 itself.

 

Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.


Example 2:

Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.

Example 3:
Input: digits = [0]
Output: [1]

**/
vector<int> plusOne(vector<int>& digits) {
        //get vector size
        int size = digits.size();
        
        // Adding one to the last digit and checking for carry
        digits[size-1] +=1; // eg: 9 + 1 = 10
        int carry = digits[size-1]/10; //eg: 10/10 = 1
        digits[size-1] = digits[size-1]%10; // eg: 10%10 = 0
        
        // loop from second last element to first and check for carry outs
        for(int i = size-2;i>=0;i--){
            if(carry ==1){
                digits[i] +=1;
                carry = digits[i]/10;
                digits[i] = digits[i]%10;
            }
        }
        
        // incase we still have carries left after loop means we we need to append "1/carry" at the begining 
        if (carry ==1){
            digits.insert(digits.begin(),1);
        }
        return digits;
    }
