/*
Example 1:

Input: nums = [1,7,3,6,5,6]
Output: 3
Explanation:
The sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3.
Also, 3 is the first index where this occurs.
Example 2:

Input: nums = [1,2,3]
Output: -1
Explanation:
There is no index that satisfies the conditions in the problem statement.
*/

/* Brute-force solution : O(n^2)*/
/* Loop around all the elemets and then start considering left and right sum of the array. If left and right sum are equal return ith element else return -1) */

int pivotIndex(vector<int>& nums) {

        //vector size
        int size = nums.size();
        int right_sum =0, left_sum =0;
        
        //outer loop 
        for (int i=0;i<size;i++){  
        
            left_sum =0;
            // inner loop for right half partitioning 
            for(int j=0;j<i;j++)
                left_sum +=nums[j];
                
            right_sum =0;
            // inner loop for right half partitioning 
            for (int j=i+1;j<size;j++)
                right_sum += nums[j];
              
            // return the left out element "i" if left_sum = right
            if(left_sum ==right_sum)
                    return i;
                  
        }
       // if loop ends successfully and we do not have a solution then return -1 (no pivot index)
    return -1;
    }
    
/* Efficient solution : O(n)*/
/* Get whole array sum and then start calculating left sub-array sum and comapring it with the -1 subtracted sub-array sum */

int pivotIndex(vector<int>& nums) {

        //vector size
        int size = nums.size();
        int right_sum =0, left_sum =0;
        
        //base conditions
        if (size ==0)
            return -1;
        if (size ==1)
            return 0;
        
        //outer loop (can also be replaced by "accumulate")
            for (int i=0;i<size;i++)
             right_sum += nums[i];
         
            left_sum =0;
            // inner loop for right half partitioning 
            
            for (int j=0;j<size;j++){
                //updating right_sum by removing the ith element
                right_sum -= nums[j];
                
                // return the left out element "i" if left_sum = right
                if(left_sum ==right_sum)
                    return j;
                left_sum +=nums[j];           
}                    
        
       // if loop ends successfully and we do not have a solution then return -1 (no pivot index)
    return -1;
}
