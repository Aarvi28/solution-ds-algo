-- Space O(logn)
-- Time O(1) ---> iterative

class Solution {
public:
    int first_occurance(vector<int>& nums, int target){
        int left =0, right =nums.size()-1; 
        int mid,result=-1;
        
        while(left <= right) {
            mid = left + ((right - left)/2);
            if (nums[mid] > target)
                right = mid-1;
            else if (nums[mid] < target)
                left = mid+1;
            else{
                result = mid;
                right = mid -1;
            }
        }
            
        return result;
    }
        
    int last_occurance(vector<int>& nums, int target){
        int left =0, right = nums.size()-1; 
        int mid,result=-1;
        while(left <= right){
            mid = left + ((right - left)/2);
            if (nums[mid] > target)
                right = mid-1;
            else if (nums[mid] < target)
                left = mid+1;
            else{
                result = mid;
                right = mid + 1;
            }
        }
        return result;
    }
    
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> result;
        first_occurance(nums,target);
        last_occurance(nums,target);
        
        return result;
    }
};


-- Can also do it with recursive call stack.

class Solution {
public:
    int first_occurance(vector<int>& nums, int left, int right, int target){
        
    if (right >= left) { 
        int mid = left + (right - left) / 2; 
        if ((mid == 0 || target > nums[mid - 1]) && nums[mid] == target) 
            return mid; 
        else if (target > nums[mid]) 
            return first_occurance(nums, (mid + 1), right, target); 
        else
            return first_occurance(nums, left, (mid - 1), target); 
    }
        else{
            return -1;
        }
    return -1; 
     
    }
        
    int last_occurance(vector<int>& nums, int left, int right, int target){
        if (right >= left) { 
        int mid = left + (right - left) / 2; 
        if ((mid == nums.size()-1 || target < nums[mid + 1]) && nums[mid] == target) 
            return mid; 
        else if (target < nums[mid]) 
            return last_occurance(nums, left, (mid + 1), target); 
        else
            return last_occurance(nums, mid+1, right, target); 
    } 
        else
            return -1;
    return -1; 
    }
    
    vector<int> searchRange(vector<int>& nums, int target) {
        int left = 0, right= nums.size()-1;
        vector<int> result;
        result.push_back(first_occurance(nums,left,right,target));
        result.push_back(last_occurance(nums,left,right,target));
        
        return result;
    }
};


-- In Java

class Solution {
    // returns leftmost (or rightmost) index at which `target` should be
    // inserted in sorted array `nums` via binary search.
    private int extremeInsertionIndex(int[] nums, int target, boolean left) {
        int lo = 0;
        int hi = nums.length;

        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if (nums[mid] > target || (left && target == nums[mid])) {
                hi = mid;
            }
            else {
                lo = mid+1;
            }
        }

        return lo;
    }

    public int[] searchRange(int[] nums, int target) {
        int[] targetRange = {-1, -1};

        int leftIdx = extremeInsertionIndex(nums, target, true);

        // assert that `leftIdx` is within the array bounds and that `target`
        // is actually in `nums`.
        if (leftIdx == nums.length || nums[leftIdx] != target) {
            return targetRange;
        }

        targetRange[0] = leftIdx;
        targetRange[1] = extremeInsertionIndex(nums, target, false)-1;

        return targetRange;
    }
}
