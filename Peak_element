// O(n) solution

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        
        int size = nums.size();
        //case when only 1 element
        if (size == 1)
            return 0;
        //case when only 1st element is the peak
        if (nums[0]>= nums[1])
            return 0;
        //case when only last element is the peak
        if(nums[size-1]>=nums[size-2])
            return size-1;
        
        for(int i=1; i<size-1;i++){
            if (nums[i]>=nums[i-1] && nums[i] >=nums[i+1])
                return i;
        }
        return 0;
    }
};

//O(logn) solution

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        
        //taking extreme left and right cases
        int left =0,right = nums.size()-1; 
        
        while(left<right){
            int mid = (left+right)/2;
            if(nums[mid] > nums[mid+1])
                right = mid;
            else
                left = mid +1;
        }
        return left;
    }
};
